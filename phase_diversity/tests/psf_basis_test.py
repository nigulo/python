import sys
sys.path.append('..')
import numpy as np
import psf_basis
import numpy.fft as fft
import unittest

image = [[0.41960785, 0.38039216, 0.36862746, 0.38039216, 0.40784314, 0.40392157,
  0.38431373, 0.4509804,  0.45882353, 0.5137255 ],
 [0.4117647,  0.38039216, 0.39607844, 0.39215687, 0.34117648, 0.3529412,
  0.35686275, 0.37254903, 0.36862746, 0.38039216],
 [0.36862746, 0.34901962, 0.30980393, 0.3254902,  0.31764707, 0.3372549,
  0.3019608,  0.3254902,  0.33333334, 0.34901962],
 [0.3254902,  0.34509805, 0.3647059,  0.37254903, 0.41568628, 0.36078432,
  0.33333334, 0.32156864, 0.28235295, 0.30980393],
 [0.4392157,  0.4509804,  0.5019608,  0.4627451,  0.4745098,  0.43529412,
  0.36078432, 0.3254902,  0.2901961,  0.2627451 ],
 [0.54901963, 0.5058824,  0.56078434, 0.56078434, 0.5803922,  0.49803922,
  0.3882353,  0.34117648, 0.28627452, 0.30588236],
 [0.6039216,  0.61960787, 0.64705884, 0.61960787, 0.627451,   0.5568628,
  0.42745098, 0.3647059,  0.32941177, 0.32156864],
 [0.6666667,  0.7294118,  0.69803923, 0.7176471,  0.62352943, 0.5803922,
  0.45882353, 0.37254903, 0.3372549,  0.3372549 ],
 [0.6745098,  0.654902,   0.7019608,  0.6862745,  0.6431373,  0.5529412,
  0.42352942, 0.40392157, 0.37254903, 0.39215687],
 [0.6509804,  0.6901961,  0.6509804,  0.6392157,  0.58431375, 0.5294118,
  0.45490196, 0.39607844, 0.36862746, 0.37254903]]

D = [[ 2.69347342e+02+0.00000000e+00j, -2.89554084e+02-3.58791959e+01j,
   7.78166322e+00+2.19016473e+01j,  4.13088439e-01+1.05472906e+00j,
  -1.89394228e-01+2.79339914e-01j, -8.79842874e-02-1.07611518e-15j,
  -1.89394228e-01-2.79339914e-01j,  4.13088439e-01-1.05472906e+00j,
   7.78166322e+00-2.19016473e+01j, -2.89554084e+02+3.58791959e+01j],
 [ 2.20569539e+02-3.82197177e+01j, -1.48964906e+02+1.66741643e+02j,
   1.08886177e+01+1.22060601e-01j,  9.82446036e-01-1.51733843e-01j,
   3.49968053e-01+5.40157833e-02j,  1.51165360e-01+3.39417635e-01j,
   1.65372141e-01+3.62126579e-01j, -1.38871618e-01+1.96330637e-01j,
  -6.88177685e-01-1.91618306e+00j, -3.24473709e+01+4.34690238e+00j],
 [-6.73694394e+00+4.86597987e-01j,  6.16744458e+00-3.98384510e+00j,
   1.44632161e-01+1.19208047e-01j,  5.50547259e-02+3.18707980e-02j,
  -2.99519595e-02+7.62596249e-02j,  3.24758725e-02+6.11444406e-02j,
   3.56973988e-02-6.56128166e-02j, -4.98874045e-02-3.47566097e-02j,
  -3.02237881e-02-1.23435566e-01j,  4.04257162e-01+8.33998525e-01j],
 [-1.25136395e-01-2.17017423e-01j,  6.94810919e-01+1.36620924e-01j,
   1.94309712e-02+1.48505054e-01j, -3.76371622e-04+5.50484602e-03j,
  -2.36229089e-02+5.77454916e-03j, -1.77015648e-02+5.57688088e-03j,
  -2.54265704e-02-7.72744643e-03j, -3.22203605e-02-7.66114178e-03j,
  -3.37811918e-02+4.86935904e-02j,  1.75678264e-01-9.45620427e-02j],
 [-1.12912483e-01-9.81225464e-02j,  6.47330468e-01-1.87891423e-01j,
   2.14891325e-01+1.95371552e-01j,  1.01616806e-02+1.55925934e-03j,
   1.65165827e-02+1.14798844e-02j, -1.74619556e-02-4.75322954e-03j,
  -3.05675761e-02-8.28579109e-03j, -5.42700655e-03-1.01090272e-02j,
  -1.11165683e-01-1.18874428e-01j,  2.25328571e-01-1.28035175e-01j],
 [-5.45039411e-02+8.70453321e-16j,  4.45028507e-01-6.14295323e-02j,
  -8.70485302e-03+1.50061235e-01j, -1.94549622e-02+7.13177320e-03j,
   5.11292546e-03+1.59197675e-02j, -2.20514119e-03-1.38831297e-18j,
   5.11292546e-03-1.59197675e-02j, -1.94549622e-02-7.13177320e-03j,
  -8.70485302e-03-1.50061235e-01j,  4.45028507e-01+6.14295323e-02j],
 [-1.12912483e-01+9.81225464e-02j,  2.25328571e-01+1.28035175e-01j,
  -1.11165683e-01+1.18874428e-01j, -5.42700655e-03+1.01090272e-02j,
  -3.05675761e-02+8.28579109e-03j, -1.74619556e-02+4.75322954e-03j,
   1.65165827e-02-1.14798844e-02j,  1.01616806e-02-1.55925934e-03j,
   2.14891325e-01-1.95371552e-01j,  6.47330468e-01+1.87891423e-01j],
 [-1.25136395e-01+2.17017423e-01j,  1.75678264e-01+9.45620427e-02j,
  -3.37811918e-02-4.86935904e-02j, -3.22203605e-02+7.66114178e-03j,
  -2.54265704e-02+7.72744643e-03j, -1.77015648e-02-5.57688088e-03j,
  -2.36229089e-02-5.77454916e-03j, -3.76371622e-04-5.50484602e-03j,
   1.94309712e-02-1.48505054e-01j,  6.94810919e-01-1.36620924e-01j],
 [-6.73694394e+00-4.86597987e-01j,  4.04257162e-01-8.33998525e-01j,
  -3.02237881e-02+1.23435566e-01j, -4.98874045e-02+3.47566097e-02j,
   3.56973988e-02+6.56128166e-02j,  3.24758725e-02-6.11444406e-02j,
  -2.99519595e-02-7.62596249e-02j,  5.50547259e-02-3.18707980e-02j,
   1.44632161e-01-1.19208047e-01j,  6.16744458e+00+3.98384510e+00j],
 [ 2.20569539e+02+3.82197177e+01j, -3.24473709e+01-4.34690238e+00j,
  -6.88177685e-01+1.91618306e+00j, -1.38871618e-01-1.96330637e-01j,
   1.65372141e-01-3.62126579e-01j,  1.51165360e-01-3.39417635e-01j,
   3.49968053e-01-5.40157833e-02j,  9.82446036e-01+1.51733843e-01j,
   1.08886177e+01-1.22060601e-01j, -1.48964906e+02-1.66741643e+02j]]
D_d = [[ 5.41635689e+02+0.00000000e+00j,  3.68881920e+01-1.19828784e+01j,
  -8.64816943e-01+9.42576414e-01j, -6.51504955e-01+3.83253339e-01j,
  -5.82391244e-01+1.30527504e-02j, -3.39103812e-01+2.01535668e-16j,
  -5.82391244e-01-1.30527504e-02j, -6.51504955e-01-3.83253339e-01j,
  -8.64816943e-01-9.42576414e-01j,  3.68881920e+01+1.19828784e+01j],
 [-2.48032613e+01-1.19056748e+00j, -1.23030366e+00-2.76166909e+01j,
   1.57626952e+00-6.29222777e-01j,  3.51148463e-01-2.20709147e-01j,
   2.47066490e-01+4.02749354e-02j,  5.72245770e-02+3.28316064e-01j,
   3.44870772e-02+4.24151735e-01j, -2.39094529e-01+2.36572506e-01j,
  -3.13439404e-01+1.10982069e-01j, -2.07496554e+00-5.17236807e+00j],
 [ 4.29771322e-01-1.68117924e-01j,  6.05283278e-01-9.56106590e-01j,
  -1.04342481e-01-7.43989854e-02j,  9.71253275e-05-2.50628086e-02j,
   2.74439735e-02+1.12812870e-02j,  2.68168765e-02-6.01139665e-03j,
  -1.98936907e-02-2.72274040e-02j, -3.07655639e-02+1.12510275e-02j,
  -4.43348031e-02-6.39044814e-02j,  1.22610705e-01-3.34345891e-01j],
 [ 2.45062025e-02+1.64002469e-01j,  3.47128889e-01-9.60586510e-02j,
   4.81920513e-02-2.51848755e-02j,  5.08895195e-03+6.83627324e-03j,
  -2.79413077e-02+2.41980710e-02j, -2.29088805e-02+1.73621054e-02j,
  -4.18062764e-02-2.78279698e-03j, -5.22953409e-02-7.83359563e-03j,
  -3.38981350e-02+1.21449388e-02j,  2.12244825e-01-3.40816681e-01j],
 [-1.83730874e-02+1.09223189e-01j,  5.17828324e-01-1.78269393e-01j,
   8.41795118e-02-6.35746257e-02j,  1.49055064e-02-4.47683245e-03j,
   2.91527923e-02+1.08062146e-02j, -2.81956731e-02-3.71090267e-03j,
  -4.86324423e-02-1.19463514e-02j, -6.38500493e-03-1.68782268e-02j,
   1.12760821e-02-7.88018940e-02j,  2.23862951e-01-2.57480896e-01j],
 [-6.41254011e-02+1.10782857e-16j,  4.68265919e-01+2.20161661e-02j,
   5.42975043e-02+3.07582688e-02j, -2.57332203e-02+1.89737827e-02j,
   1.08008137e-02+2.39326841e-02j, -3.48344309e-03+3.13577405e-18j,
   1.08008137e-02-2.39326841e-02j, -2.57332203e-02-1.89737827e-02j,
   5.42975043e-02-3.07582688e-02j,  4.68265919e-01-2.20161661e-02j],
 [-1.83730874e-02-1.09223189e-01j,  2.23862951e-01+2.57480896e-01j,
   1.12760821e-02+7.88018940e-02j, -6.38500493e-03+1.68782268e-02j,
  -4.86324423e-02+1.19463514e-02j, -2.81956731e-02+3.71090267e-03j,
   2.91527923e-02-1.08062146e-02j,  1.49055064e-02+4.47683245e-03j,
   8.41795118e-02+6.35746257e-02j,  5.17828324e-01+1.78269393e-01j],
 [ 2.45062025e-02-1.64002469e-01j,  2.12244825e-01+3.40816681e-01j,
  -3.38981350e-02-1.21449388e-02j, -5.22953409e-02+7.83359563e-03j,
  -4.18062764e-02+2.78279698e-03j, -2.29088805e-02-1.73621054e-02j,
  -2.79413077e-02-2.41980710e-02j,  5.08895195e-03-6.83627324e-03j,
   4.81920513e-02+2.51848755e-02j,  3.47128889e-01+9.60586510e-02j],
 [ 4.29771322e-01+1.68117924e-01j,  1.22610705e-01+3.34345891e-01j,
  -4.43348031e-02+6.39044814e-02j, -3.07655639e-02-1.12510275e-02j,
  -1.98936907e-02+2.72274040e-02j,  2.68168765e-02+6.01139665e-03j,
   2.74439735e-02-1.12812870e-02j,  9.71253275e-05+2.50628086e-02j,
  -1.04342481e-01+7.43989854e-02j,  6.05283278e-01+9.56106590e-01j],
 [-2.48032613e+01+1.19056748e+00j, -2.07496554e+00+5.17236807e+00j,
  -3.13439404e-01-1.10982069e-01j, -2.39094529e-01-2.36572506e-01j,
   3.44870772e-02-4.24151735e-01j,  5.72245770e-02-3.28316064e-01j,
   2.47066490e-01-4.02749354e-02j,  3.51148463e-01+2.20709147e-01j,
   1.57626952e+00+6.29222777e-01j, -1.23030366e+00+2.76166909e+01j]]


class test_psf_basis(unittest.TestCase):

    def test_likelihood(self):
        
        jmax = 5
        arcsec_per_px = 0.055
        diameter = 20.0
        wavelength = 5250.0
        nx = 10
        F_D = 1.0

        gamma = 1.
        
        psf = psf_basis.psf_basis(jmax = jmax, nx = nx, arcsec_per_px = arcsec_per_px, diameter = diameter, wavelength = wavelength, F_D = F_D)
        psf.create_basis(do_fft=True, do_defocus=True)


        betas = np.random.normal(size=jmax) + np.random.normal(size=jmax)*1.j

        lik = psf.likelihood(np.concatenate((betas.real, betas.imag)), [D, D_d, gamma])
        
        P, P_d = psf.get_FP(betas)
        num = D_d*P-D*P_d
        num *= num.conjugate()
        #lik_expected = np.sum(num/np.sqrt(P*P.conjugate() + gamma*P_d*P_d.conjugate())).real
        lik_expected = np.sum(num/(P*P.conjugate() + gamma*P_d*P_d.conjugate())).real
        np.testing.assert_almost_equal(lik, lik_expected, 6)

    def test_likelihood_grad(self):
        
        jmax = 5
        arcsec_per_px = 0.055
        diameter = 20.0
        wavelength = 5250.0
        nx = 10
        F_D = 1.0
        
        gamma = 1.
        
        psf = psf_basis.psf_basis(jmax = jmax, nx = nx, arcsec_per_px = arcsec_per_px, diameter = diameter, wavelength = wavelength, F_D = F_D)
        psf.create_basis(do_fft=True, do_defocus=True)


        betas = np.random.normal(size=jmax) + np.random.normal(size=jmax)*1.j

        delta_betas = betas*1.0e-7

        lik = psf.likelihood(np.concatenate((betas.real, betas.imag)), [D, D_d, gamma])
        liks = np.repeat(lik, len(betas))
        liks1_real = np.zeros_like(betas.real)
        liks1_imag = np.zeros_like(betas.imag)
        for i in np.arange(0, len(betas)):
            delta = np.zeros_like(betas)
            delta[i] = delta_betas[i].real
            betas1 = betas+delta
            liks1_real[i] = psf.likelihood(np.concatenate((betas1.real, betas1.imag)), [D, D_d, gamma])

            delta[i] = 1.j*delta_betas[i].imag
            betas1 = betas+delta
            liks1_imag[i] = psf.likelihood(np.concatenate((betas1.real, betas1.imag)), [D, D_d, gamma])
        
        grads_expected = np.concatenate(((liks1_real - liks) / delta_betas.real, (liks1_imag - liks) / delta_betas.imag))
    
        grads = psf.likelihood_grad(np.concatenate((betas.real, betas.imag)), [D, D_d, gamma])

        for i in np.arange(0, len(grads)):
            np.testing.assert_approx_equal(grads[i], grads_expected[i], 4)
            
    def test_deconvolve(self):
        jmax = 5
        arcsec_per_px = 0.055
        diameter = 20.0
        wavelength = 5250.0
        nx = 10
        F_D = 1.0
        
        gamma = 1.

        fimage = fft.fftshift(fft.fft2(image))
        
        psf = psf_basis.psf_basis(jmax = jmax, nx = nx, arcsec_per_px = arcsec_per_px, diameter = diameter, wavelength = wavelength, F_D = F_D)
        psf.create_basis(do_fft=True, do_defocus=True)


        betas = np.random.normal(size=jmax) + np.random.normal(size=jmax)*1.j

        D, D_d = psf.multiply(fimage, betas)
        image_back = psf.deconvolve(D, D_d, betas, gamma, do_fft = True)
        #fimage_back = psf.get_restoration(D, D_d, betas, gamma, do_fft = False)

        np.testing.assert_almost_equal(image_back, image, 10)
        #np.testing.assert_almost_equal(fimage_back, fimage, 8)

        
if __name__ == '__main__':
    unittest.main()
