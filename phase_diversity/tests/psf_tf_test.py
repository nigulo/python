import sys
sys.path.append('..')
sys.path.append('../../utils')
import numpy as np
import psf_tf as psf_tf
import psf as psf
#import numpy.fft as fft
#import scipy.signal as signal
import unittest
import utils
import plot
import tensorflow as tf

jmax = 50
diameter = 100.0
wavelength = 5250.0


image10x10 = np.array([[0.41960785, 0.38039216, 0.36862746, 0.38039216, 0.40784314, 0.40392157,
  0.38431373, 0.4509804,  0.45882353, 0.5137255 ],
 [0.4117647,  0.38039216, 0.39607844, 0.39215687, 0.34117648, 0.3529412,
  0.35686275, 0.37254903, 0.36862746, 0.38039216],
 [0.36862746, 0.34901962, 0.30980393, 0.3254902,  0.31764707, 0.3372549,
  0.3019608,  0.3254902,  0.33333334, 0.34901962],
 [0.3254902,  0.34509805, 0.3647059,  0.37254903, 0.41568628, 0.36078432,
  0.33333334, 0.32156864, 0.28235295, 0.30980393],
 [0.4392157,  0.4509804,  0.5019608,  0.4627451,  0.4745098,  0.43529412,
  0.36078432, 0.3254902,  0.2901961,  0.2627451 ],
 [0.54901963, 0.5058824,  0.56078434, 0.56078434, 0.5803922,  0.49803922,
  0.3882353,  0.34117648, 0.28627452, 0.30588236],
 [0.6039216,  0.61960787, 0.64705884, 0.61960787, 0.627451,   0.5568628,
  0.42745098, 0.3647059,  0.32941177, 0.32156864],
 [0.6666667,  0.7294118,  0.69803923, 0.7176471,  0.62352943, 0.5803922,
  0.45882353, 0.37254903, 0.3372549,  0.3372549 ],
 [0.6745098,  0.654902,   0.7019608,  0.6862745,  0.6431373,  0.5529412,
  0.42352942, 0.40392157, 0.37254903, 0.39215687],
 [0.6509804,  0.6901961,  0.6509804,  0.6392157,  0.58431375, 0.5294118,
  0.45490196, 0.39607844, 0.36862746, 0.37254903]])

'''
image20x20 = np.array([[0.41960785, 0.38039216, 0.36862746, 0.38039216, 0.40784314, 0.40392157,
  0.38431373, 0.4509804, 0.45882353, 0.5137255, 0.49803922, 0.49803922,
  0.49019608, 0.4627451,  0.43529412, 0.42352942, 0.44705883, 0.46666667,
  0.52156866, 0.54509807],
 [0.4117647,  0.38039216, 0.39607844, 0.39215687, 0.34117648, 0.3529412,
  0.35686275, 0.37254903, 0.36862746, 0.38039216, 0.43137255, 0.43137255,
  0.4,        0.43529412, 0.44313726, 0.45490196, 0.47843137, 0.5137255,
  0.56078434, 0.56078434],
 [0.36862746, 0.34901962, 0.30980393, 0.3254902,  0.31764707, 0.3372549,
  0.3019608,  0.3254902,  0.33333334, 0.34901962, 0.35686275, 0.35686275,
  0.3882353,  0.42745098, 0.44313726, 0.45882353, 0.49411765, 0.52156866,
  0.5137255,  0.5294118 ],
 [0.3254902,  0.34509805, 0.3647059,  0.37254903, 0.41568628, 0.36078432,
  0.33333334, 0.32156864, 0.28235295, 0.30980393, 0.31764707, 0.3137255,
  0.3764706,  0.42352942, 0.44313726, 0.45882353, 0.49019608, 0.4745098,
  0.43529412, 0.43137255],
 [0.4392157,  0.4509804,  0.5019608,  0.4627451,  0.4745098,  0.43529412,
  0.36078432, 0.3254902,  0.2901961,  0.2627451,  0.34509805, 0.33333334,
  0.34901962, 0.37254903, 0.4392157,  0.4509804,  0.43137255, 0.43137255,
  0.38431373, 0.40392157],
 [0.54901963, 0.5058824,  0.56078434, 0.56078434, 0.5803922,  0.49803922,
  0.3882353,  0.34117648, 0.28627452, 0.30588236, 0.30588236, 0.34509805,
  0.34117648, 0.3882353,  0.40392157, 0.41960785, 0.4392157,  0.40784314,
  0.39215687, 0.38039216],
 [0.6039216,  0.61960787, 0.64705884, 0.61960787, 0.627451,   0.5568628,
  0.42745098, 0.3647059,  0.32941177, 0.32156864, 0.32156864, 0.3764706,
  0.34509805, 0.39607844, 0.41568628, 0.4117647,  0.43137255, 0.4117647,
  0.4117647,  0.42745098],
 [0.6666667,  0.7294118,  0.69803923, 0.7176471,  0.62352943, 0.5803922,
  0.45882353, 0.37254903, 0.3372549,  0.3372549,  0.37254903, 0.3764706,
  0.39607844, 0.40392157, 0.43529412, 0.44313726, 0.45882353, 0.46666667,
  0.43137255, 0.45490196],
 [0.6745098,  0.654902,   0.7019608,  0.6862745,  0.6431373,  0.5529412,
  0.42352942, 0.40392157, 0.37254903, 0.39215687, 0.38431373, 0.40784314,
  0.42352942, 0.43137255, 0.45882353, 0.47058824, 0.48235294, 0.4745098,
  0.4627451,  0.48235294],
 [0.6509804,  0.6901961,  0.6509804,  0.6392157,  0.58431375, 0.5294118,
  0.45490196, 0.39607844, 0.36862746, 0.37254903, 0.4117647,  0.4,
  0.4392157,  0.4509804,  0.4509804,  0.49411765, 0.47843137, 0.4627451,
  0.47058824, 0.49803922], 
 [0.61960787, 0.654902,   0.63529414, 0.6313726,  0.5686275,  0.4862745,
  0.40392157, 0.38039216, 0.40392157, 0.38039216, 0.42352942, 0.4392157,
  0.42745098, 0.48235294, 0.5058824,  0.5058824,  0.48235294, 0.45490196,
  0.47843137, 0.48235294],
 [0.6431373,  0.61960787, 0.5882353,  0.56078434, 0.53333336, 0.43137255,
  0.39215687, 0.37254903, 0.36862746, 0.38431373, 0.40784314, 0.43529412,
  0.48235294, 0.5411765,  0.53333336, 0.49411765, 0.4627451,  0.4509804,
  0.4745098,  0.5529412 ],
 [0.5764706,  0.58431375, 0.60784316, 0.5686275,  0.4862745,  0.4392157,
  0.38039216, 0.39215687, 0.41568628, 0.40784314, 0.43529412, 0.44705883,
  0.49803922, 0.5294118,  0.5176471,  0.4627451,  0.4627451,  0.45490196,
  0.49803922, 0.5372549 ],
 [0.58431375, 0.627451,   0.5764706,  0.56078434, 0.49019608, 0.4,
  0.3882353,  0.39215687, 0.4,        0.43137255, 0.41960785, 0.45490196,
  0.4862745,  0.5137255,  0.5254902,  0.5019608,  0.46666667, 0.47058824,
  0.5254902,  0.5803922 ],
 [0.5568628,  0.59607846, 0.59607846, 0.5411765,  0.52156866, 0.4117647,
  0.39215687, 0.40392157, 0.4392157,  0.4509804,  0.4509804,  0.45490196,
  0.49803922, 0.5294118,  0.5137255,  0.5411765,  0.5058824,  0.50980395,
  0.54509807, 0.6039216 ],
 [0.52156866, 0.5294118,  0.5372549,  0.49803922, 0.49411765, 0.4392157,
  0.38039216, 0.45490196, 0.4627451,  0.5058824,  0.5176471,  0.5411765,
  0.5921569,  0.59607846, 0.6039216,  0.5647059,  0.54901963, 0.54901963,
  0.58431375, 0.627451  ],
 [0.5137255,  0.50980395, 0.49803922, 0.46666667, 0.48235294, 0.46666667,
  0.42352942, 0.4627451,  0.49411765, 0.5647059,  0.5647059,  0.57254905,
  0.627451,   0.67058825, 0.6627451,  0.6313726,  0.6,        0.56078434,
  0.59607846, 0.6313726 ],
 [0.4862745,  0.49411765, 0.45490196, 0.42745098, 0.47058824, 0.44705883,
  0.4745098,  0.46666667, 0.54901963, 0.5686275,  0.58431375, 0.6784314,
  0.7176471,  0.70980394, 0.65882355, 0.63529414, 0.5803922,  0.5764706,
  0.59607846, 0.6431373 ],
 [0.4627451,  0.47058824, 0.41960785, 0.48235294, 0.42745098, 0.4862745,
  0.5019608,  0.5647059,  0.5137255,  0.5764706,  0.627451,   0.654902,
  0.7137255,  0.69411767, 0.6666667,  0.6117647,  0.5764706,  0.57254905,
  0.6039216,  0.6392157 ],
 [0.39215687, 0.4509804,  0.43137255, 0.44313726, 0.46666667, 0.4745098,
  0.49411765, 0.5137255,  0.5176471,  0.5686275,  0.5686275,  0.627451,
  0.63529414, 0.68235296, 0.6156863,  0.5921569,  0.5372549,  0.5411765,
  0.6,        0.60784316]])
'''

def get_params(nx):

    #arcsec_per_px = .03*(wavelength*1e-10)/(diameter*1e-2)*180/np.pi*3600
    arcsec_per_px = .25*(wavelength*1e-10)/(diameter*1e-2)*180/np.pi*3600
    print("arcsec_per_px=", arcsec_per_px)
    defocus = 2.*np.pi*100
    #defocus = (0., 0.)
    return (arcsec_per_px, defocus)

def create_psf(nx):
    arcsec_per_px, defocus = get_params(nx)
    aperture_func = lambda xs: utils.aperture_circ(xs, coef=15, radius =1.)
    defocus_func = lambda xs: defocus*np.sum(xs*xs, axis=2)

    pa = psf_tf.phase_aberration_tf(jmax, start_index=0)
    ctf = psf_tf.coh_trans_func_tf(aperture_func, pa, defocus_func)
    psf_tf_ = psf_tf.psf_tf(ctf, nx, arcsec_per_px = arcsec_per_px, diameter = diameter, wavelength = wavelength)
    
    
    pa = psf.phase_aberration(jmax, start_index=0)
    ctf = psf.coh_trans_func(aperture_func, pa, defocus_func)
    psf_ = psf.psf(ctf, nx, arcsec_per_px, diameter, wavelength)
    return psf_tf_, psf_

class test_aberrate(unittest.TestCase):
    
    def test(self):
        nx = 10
        psf_tf_, psf_ = create_psf(nx)
        image1 = utils.upsample(image10x10)

        alphas = np.random.normal(size=(jmax))*10.
        D_expected = psf_.convolve(image1, alphas = np.array([alphas]))[0]

        alphas_tf = tf.constant(alphas, dtype='float32')
        #self.objs = np.reshape(self.objs, (len(self.objs), -1))
        
        image_tf = tf.constant(image10x10.flatten(), dtype='float32')
        D = psf_tf_.aberrate(tf.concat((alphas_tf, image_tf), 0))

        
        my_plot = plot.plot(nrows=2, ncols=2)
        print(D.shape)
        my_plot.colormap(D[0,:,:,0], [0, 0])
        my_plot.colormap(D[0,:,:,1], [0, 1])
        my_plot.colormap(D_expected[0], [1, 0])
        my_plot.colormap(D_expected[1], [1,1])
            
        my_plot.save("test_aberrate.png")
        my_plot.close()

        np.testing.assert_almost_equal(D, D_expected, 15)


if __name__ == '__main__':
    unittest.main()