import sys
sys.path.append('..')
sys.path.append('../..')
import numpy as np
import unittest
import least_squares as lsq

x = np.array([
    [1, 83.0, 234289, 2356, 1590, 107608, 1947],
    [1, 88.5, 259426, 2325, 1456, 108632, 1948],
    [1, 88.2, 258054, 3682, 1616, 109773, 1949],
    [1, 89.5, 284599, 3351, 1650, 110929, 1950],
    [1, 96.2, 328975, 2099, 3099, 112075, 1951],
    [1, 98.1, 346999, 1932, 3594, 113270, 1952],
    [1, 99.0, 365385, 1870, 3547, 115094, 1953],
    [1, 100.0, 363112, 3578, 3350, 116219, 1954],
    [1, 101.2, 397469, 2904, 3048, 117388, 1955],
    [1, 104.6, 419180, 2822, 2857, 118734, 1956],
    [1, 108.4, 442769, 2936, 2798, 120445, 1957],
    [1, 110.8, 444546, 4681, 2637, 121950, 1958],
    [1, 112.6, 482704, 3813, 2552, 123366, 1959],
    [1, 114.2, 502601, 3931, 2514, 125368, 1960],
    [1, 115.7, 518173, 4806, 2572, 127852, 1961],
    [1, 116.9, 554894, 4007, 2827, 130081, 1962]])

y = np.array([
    60323,
    61122,
    60171,
    61187,
    63221,
    63639,
    64989,
    63761,
    66019,
    67857,
    68169,
    66513,
    68655,
    69564,
    69331,
    70551])

b_expected = [-3482258.6345964866, 
            15.061872271428058, 
            -3.581917929262539e-2,
            -2.020229803817295, 
            -1.0332268671735234, 
            -5.1104105653362264e-2,
            1829.1514646138853]

m = np.array([[16.0,1626.9,6203175.0,51093.0,41707.0,1878784.0,31272.0],
            [1626.9,167172.09,6.467006497e8,5289080.100000001,4293173.699999999,1.921396506e8,3180539.9000000004],
            [6203175.0,6.467006497e8,2.553151559929e12,2.0650541815e10,1.6632945158e10,7.38680235369e11,1.2131170206e10],
            [51093.0,5289080.100000001,2.0650541815e10,1.76254267e8,1.31452803e8,6.066485555e9,9.9905864e7],
            [41707.0,4293173.699999999,1.6632945158e10,1.31452803e8,1.15981677e8,4.92386424e9,8.1537068e7],
            [1878784.0,1.921396506e8,7.38680235369e11,6.066485555e9,4.92386424e9,2.2134014265e11,3.672577089e9],
            [31272.0,3180539.9000000004,1.2131170206e10,9.9905864e7,8.1537068e7,3.672577089e9,6.1121464e7]])

v = np.array([1045072.0,
            1.0681617720000002e8,
            4.1032273457e11,
            3.361978021e9,
            2.740941335e9,
            1.23068464014e11,
            2.042836838e9])


m1 = np.concatenate([m, v[:,None]], axis=1)


def gentleman():
    state = lsq.initialize(x.shape[1])
    for i in range(0, len(y)):
        state = lsq.add_measurement(x[i], y[i], 1, state)
    return state

class test_lsq(unittest.TestCase):

    def test(self):
        result = lsq.solve(lsq.invert(gentleman()))

        np.testing.assert_array_almost_equal(result, b_expected)
        
        
if __name__ == '__main__':
    unittest.main()