import unittest

from dp import DP

LEFT = 0
RIGHT = 1
UP = 2
DOWN = 3

N = 4

actions = {LEFT, RIGHT, UP, DOWN}
states = set()
transitions = {}
for x in range(N):
    for y in range(N):
        states.add((x, y))
        for a in actions:
            if x == 0 and y == 0:
                transitions[((x, y), a)] = [((x, y), 0, 0)]
            elif x == 3 and y == 3:
                transitions[((x, y), a)] = [((x, y), 0, 0)]
            elif a == LEFT:
                if x == 0:
                    transitions[((x, y), a)] = [((x, y), -1, 1)]
                else:
                    transitions[((x, y), a)] = [((x-1, y), -1, 1)]
            elif a == RIGHT:
                if x == N-1:
                    transitions[((x, y), a)] = [((x, y), -1, 1)]
                else:
                    transitions[((x, y), a)] = [((x+1, y), -1, 1)]
            elif a == DOWN:
                if y == 0:
                    transitions[((x, y), a)] = [((x, y), -1, 1)]
                else:
                    transitions[((x, y), a)] = [((x, y-1), -1, 1)]
            else:
                if y == N-1:
                    transitions[((x, y), a)] = [((x, y), -1, 1)]
                else:
                    transitions[((x, y), a)] = [((x, y+1), -1, 1)]

class TestMC(unittest.TestCase):
    
    def test(self):
                        
        dp = DP(states, actions, transitions)
        v, q, pi = dp.solve()
                
        v_expected = {(0, 1): -1.0, (1, 2): -2.71, (2, 1): -2.71, (0, 0): 0, (3, 1): -1.9, (1, 1): -1.9, (0, 3): -2.71, (2, 0): -1.9, (3, 0): -2.71, (2, 3): -1.0, (0, 2): -1.9, (3, 3): 0, (2, 2): -1.9, (1, 0): -1.0, (3, 2): -1.0, (1, 3): -1.9}
        q_expected = {((0, 1), 0): -1.9, ((0, 1), 1): -2.71, ((0, 1), 2): -2.71, ((0, 1), 3): -1.0, ((1, 2), 0): -2.71, ((1, 2), 1): -2.71, ((1, 2), 2): -2.71, ((1, 2), 3): -2.71, ((2, 1), 0): -2.71, ((2, 1), 1): -2.71, ((2, 1), 2): -2.71, ((2, 1), 3): -2.71, ((0, 0), 0): 0, ((0, 0), 1): 0, ((0, 0), 2): 0, ((0, 0), 3): 0, ((3, 1), 0): -3.439, ((3, 1), 1): -2.71, ((3, 1), 2): -1.9, ((3, 1), 3): -3.439, ((1, 1), 0): -1.9, ((1, 1), 1): -3.439, ((1, 1), 2): -3.439, ((1, 1), 3): -1.9, ((0, 3), 0): -3.439, ((0, 3), 1): -2.71, ((0, 3), 2): -3.439, ((0, 3), 3): -2.71, ((2, 0), 0): -1.9, ((2, 0), 1): -3.439, ((2, 0), 2): -3.439, ((2, 0), 3): -2.71, ((3, 0), 0): -2.71, ((3, 0), 1): -3.439, ((3, 0), 2): -2.71, ((3, 0), 3): -3.439, ((2, 3), 0): -2.71, ((2, 3), 1): -1.0, ((2, 3), 2): -1.9, ((2, 3), 3): -2.71, ((0, 2), 0): -2.71, ((0, 2), 1): -3.439, ((0, 2), 2): -3.439, ((0, 2), 3): -1.9, ((3, 3), 0): 0, ((3, 3), 1): 0, ((3, 3), 2): 0, ((3, 3), 3): 0, ((2, 2), 0): -3.439, ((2, 2), 1): -1.9, ((2, 2), 2): -1.9, ((2, 2), 3): -3.439, ((1, 0), 0): -1.0, ((1, 0), 1): -2.71, ((1, 0), 2): -2.71, ((1, 0), 3): -1.9, ((3, 2), 0): -2.71, ((3, 2), 1): -1.9, ((3, 2), 2): -1.0, ((3, 2), 3): -2.71, ((1, 3), 0): -3.439, ((1, 3), 1): -1.9, ((1, 3), 2): -2.71, ((1, 3), 3): -3.439}
        pi_expected = {(0, 1): 3, (1, 2): 3, (2, 1): 3, (0, 0): 0, (3, 1): 2, (1, 1): 3, (0, 3): 1, (2, 0): 0, (3, 0): 0, (2, 3): 1, (0, 2): 3, (3, 3): 0, (2, 2): 1, (1, 0): 0, (3, 2): 2, (1, 3): 1}
        
        self.assertEqual(v, v_expected)
        self.assertEqual(q, q_expected)
        self.assertEqual(pi, pi_expected)

    def test_value_iteration(self):
                     
        dp = DP(states, actions, transitions)
        v, _, pi = dp.solve(pi_or_v_iter=False)
                
        v_expected = {(0, 1): -1.0, (1, 2): -2.71, (2, 1): -2.71, (0, 0): 0, (3, 1): -1.9, (1, 1): -1.9, (0, 3): -2.71, (2, 0): -1.9, (3, 0): -2.71, (2, 3): -1.0, (0, 2): -1.9, (3, 3): 0, (2, 2): -1.9, (1, 0): -1.0, (3, 2): -1.0, (1, 3): -1.9}
        pi_expected = {(0, 1): 3, (1, 2): 0, (2, 1): 0, (0, 0): 0, (3, 1): 2, (1, 1): 0, (0, 3): 1, (2, 0): 0, (3, 0): 0, (2, 3): 1, (0, 2): 3, (3, 3): 0, (2, 2): 1, (1, 0): 0, (3, 2): 2, (1, 3): 1}
        
        self.assertEqual(v, v_expected)
        self.assertEqual(pi, pi_expected)
